function exploit(startObject, value, searchField = 'value', limit = -1) {
	var startName = '';

	if ('string' === typeof startObject) {
		startName = startObject;
		startObject = eval(startObject);
	} else if (window === startObject) {
		startName = 'window';
	} else if (document === startObject) {
		startName = 'document';
	}

	var stack = [[startObject, startName, startName]];
	var searched = [];
	var found = 0;
	var count = 1;
	var isRegex = 'string' === typeof value && (-1 !== value.indexOf('*') || '^' === value[0] || '$' === value[value.length-1]);

	window.gsResults = [];

	if (isRegex) {
		value = new RegExp(value);
	} else if ('object' === typeof value && value instanceof RegExp) {
		isRegex = true;
	}

	if (!searchField) {
		searchField = 'value';
	}

	if (-1 === ['value', 'key', 'all'].indexOf(searchField)) {
		console.error('The "searchField" parameter must be either of [value|key|all]. Found:', searchField);
		return;
	}

	function isArray(test) {
		var type = Object.prototype.toString.call(test);
		return '[object Array]' === type || '[object NodeList]' === type;
	}

	function isElement(o){
	    if(HTMLElement === "object"){
		    return (o instanceof HTMLElement);
	    }
	    try{
			return (o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName==="string");
		}catch(error){
			return false;
		}

	}

	function isMatch(item) {
		if (isRegex) {
			try{
				return value.test(item);
			}catch(error){
				return false;
			}
		} else {
			return item === value;
		}
	}

	function result(type, address, shortAddr, value) {
		var msg = [];

		found++;
		window.gsResults[found] = {
			match: type,
			value: value,
			pathOrig: address,
			pathShort: shortAddr
		};

		msg.push("Match: \t" + shortAddr+ ";"+value),
	
		console.log(msg.join("\n"));
	}

	function skip(obj, key) {
		var traversing = [
			'firstChild',
			'previousSibling',
			'nextSibling',
			'lastChild',
			'previousElementSibling',
			'nextElementSibling',
			'firstEffect',
			'nextEffect',
			'lastEffect'
		];
		var scopeChange = [
			'ownerDocument',
		];
		var deprecatedDOM = [
			'webkitStorageInfo',
		];

		if (-1 !== traversing.indexOf(key)) { return true; }
		if (-1 !== scopeChange.indexOf(key)) { return true; }
		if (-1 !== deprecatedDOM.indexOf(key)) { return true; }

		var isInvalid = false;
		try {
			obj[key]
		} catch(ex) {
			isInvalid = true;
		}

		return isInvalid;
	}

	while (stack.length) {
		if (limit > 0 && found >= limit) { break; }

		var fromStack = stack.pop();
		var obj = fromStack[0];
		var address = fromStack[1];
		var display = fromStack[2];

		if ('key' !== searchField && isMatch(obj)) {
			result( 'value', address, display, obj);
			if (limit > 0 && found >= limit) { break; }
		}

		if (obj && typeof obj == 'object' && -1 === searched.indexOf(obj)) {
			var objIsArray = isArray(obj);

			if ( isElement(obj) && obj.id ) {
				display = 'document.getElementById("' + obj.id + '")';
			}

			for (i in obj) {
				if (skip(obj, i)) { continue; }

				var subAddr = (objIsArray || 'number' === typeof i) ? '[' + i + ']' : '.' + i;
				var addr = address + subAddr;
				var displayAddr = display + subAddr;

				stack.push([obj[i], addr, displayAddr]);
				count++;

				if ('value' !== searchField && isMatch(i)) {
					result( 'key', address, displayAddr, obj[i]);
					if (limit > 0 && found >= limit) { break; }
				}
			}
			searched.push(obj);
		}
	}

	searched = null;
	
	console.log('-----');
	console.log('All Done!');
	console.log('Searched', count.toLocaleString(), 'items');
	console.log('Found', found.toLocaleString(), 'results');


	return window.gsResults;
}
